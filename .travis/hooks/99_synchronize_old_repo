#!/bin/sh
#
# Synchronization hook between this repo (opentraveldata/opentraveldata)
# and the old one (opentraveldata/optd)
#
#Â To use this, just add a line in .travis/synchronization_file_map.csv,
# in the following order: $old^$new
#
# The separator is ^, meaning that we do not support the character '^' in
# file names (while unix/git allow it). Using the null character ('\0') as
# a separator instead would allow any valid filename (since no filename
# can contain this character), but not all the text editors support it
# (vim does: <C-v>10<CR> in insertion mode). If we want to switch to that,
# then cut supports cutting on the null character with `cut -d ''` (notice
# the space between -d and '').
#


# ssh setup
# The key .travis/id_rsa has been decrypted by travis from
# .travis/id_rsa.enc prior to the execution of this hook.
chmod 600 .travis/id_rsa
eval $(ssh-agent -s)
ssh-add .travis/id_rsa

# git setup
git config --global user.email "opentraveldata@1adev.com"
git config --global user.name "opentraveldata-bot"

# Clone the old repo
git clone git@github.com:opentraveldata/optd.git /tmp/optd

# Copy the files
n=0
cat .travis/synchronization_file_map.csv | while read line ; do
  n=$((n+1))
  old=$(echo $line | cut -d^ -f1)
  new=$(echo $line | cut -d^ -f2)
  if [ ! -f "$new" ] ; then
    echo "\n#####"
    echo "In .travis/synchronization_file_map.csv:$n"
    echo "\$old=$old"
    echo "\$new=$new"
    echo "The new file '$new' is missing in this repo"
    echo "It is needed to update the old file '$old' in opentraveldata/optd"
    echo "If you moved this file, please update .travis/synchronization_file_map.csv"
    echo "#####\n"
    exit 1
  fi
  if [ ! -f /tmp/optd/"$old"  ] ; then
    echo "\n#####"
    echo "In .travis/synchronization_file_map.csv:$n"
    echo "\$old=$old"
    echo "\$new=$new"
    echo "The file '$old' is missing in opentraveldata/optd"
    echo "Please check .travis/synchronization_file_map.csv for mistakes"
    echo "#####\n"
    exit 1
  fi
  echo "copying '$new' in 'optd/$old'"
  cp "$new" /tmp/optd/"$old"
done

# The previous commands runs in a subshell, so the 'exit' only exit this
# subshell, not the whole hook. We need to exit the hook if things went
# bad
[ $? != 0 ] && exit 1

# Get the log of the last commit
LOG="$(git log -1 --pretty=format:%s)


This commit was automatically imported from the repository opentraveldata/opentraveldata:


$(git log -1 --pretty=raw)"

# Go to the old repo, commit and push (if nothing has changed, git is
# clever enough not to do anything)
cd /tmp/optd
echo "Showing what we are about to synchronize"
git status
git commit -a -m "$LOG"
git push
